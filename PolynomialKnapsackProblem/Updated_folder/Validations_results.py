import matplotlib.pyplot as plt
import pandas as pd
import json
import numpy as np
import time as t

with open("Results/Validation/validation_more_complete_2.json") as f:
	d=json.load(f)

dfs = pd.read_excel("Results/Model_results/new_results(config_final).xlsx", sheet_name="Modello",header=0,skiprows=1)
names=[name.split(".")[0] for name in dfs["name_file"]]
objFunModel=dfs["objfun"] 
timesModel=dfs["comp_time"]
#EXTRACT ALSO THE DATA GENERATED BY THE 'OLD GENETIC' -> OBTAINED FIXING n_chromosomes=100 AND NO SCALING
objFunOldHeu=dfs["objfun.1"] 
timesOldHeu=dfs["comp_time.1"]
dict_model={}
dict_old_heu={}
for it in range(len(names)):
	dict_model[names[it]]=(objFunModel[it],timesModel[it])
	dict_old_heu[names[it]]=(objFunOldHeu[it],timesOldHeu[it])

for it in range(len(list(d.keys()))): #CYCLING ON THE NAME
	name=list(d.keys())[it]
	file=d[list(d.keys())[it]]
	numerosity=file["70"] #ALREADY EXTRACTING THE NUMEROSIY (FIXED)
	for it2 in range(len(list(numerosity.keys()))): #CYCLING ON THE PENALIZATION
		penalization=list(numerosity.keys())[it2]
		for it3 in range(len(list(numerosity[penalization].keys()))): #CYCLING ON THE WEIGHT
			weight=list(numerosity[penalization].keys())[it3]
			print(f"For file {name} and penalization {penalization} and weight {weight} the result is {numerosity[penalization][weight][0]}")
			exit()
"""
#MODIFY THISPART, RELATED TO OLD THINGS!
plt.figure()
#colours=["r","b","k","y","g","orange"]
labels=["50","60","70","80","90","100"]
#l=[str(i) for i in [np.arange(len(list(d.keys())))]]
for key in plots.keys():
	X=np.arange(len(plots[key]))
	plt.plot(X,plots[key])
	#plt.scatter(X,plots[key])

plt.title("Difference percentage varying n* of initial chromosomes")
plt.legend(labels=labels)
plt.plot(X,np.ones(len(X))*0.05)
plt.ylabel("Percentage residual")
#plt.ylim(0,0.05)
plt.xlabel("File Runned")
plt.show()

fig, axs = plt.subplots(2)
fig.suptitle('Statistics per number of chromosomes')
axs[0].plot(sum.keys(),sum.values())
axs[0].scatter(sum.keys(),sum.values())
axs[0].set_title("Sum of relative residuals")
axs[1].plot(times.keys(),times.values())
axs[1].scatter(times.keys(),times.values())
axs[1].set_title("Sum of times taken")
plt.show()


plt.figure()
plt.boxplot(sumList.values(),labels=labels,patch_artist=True)
plt.ylabel('Percentage residual')
plt.xlabel('NÂ° of chromosomes')
plt.xticks(rotation = 45)
plt.grid()
plt.title("Residuals varying number of chromosomes")
plt.show()
labels=["50","60","70","80","90","100","100*"]
fig, (ax1, ax2) = plt.subplots(1,2)
fig.suptitle('Boxplots per number of chromosomes')
ax1.boxplot(sumList.values(),labels=labels,patch_artist=True)
ax1.set_title("Relative residuals")
ax2.boxplot(timesList.values(),labels=labels,patch_artist=True)
ax2.set_title("Times taken")
plt.show()
"""